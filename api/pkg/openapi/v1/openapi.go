// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Problem The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].
type Problem struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code.
	Status *int `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`

	// Type A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// User defines model for User.
type User struct {
	// Added Date the user was added to the database
	Added *time.Time `json:"added,omitempty"`

	// GameBans Number of game bans on record
	GameBans *int `json:"gameBans,omitempty"`

	// LastUpdated Date the user was last updated
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`

	// SteamID User Steam ID (64 bits)
	SteamID float32 `json:"steamID"`

	// Username User supplied username
	Username *string `json:"username,omitempty"`

	// VacBans Number of VAC bans on record
	VacBans *int `json:"vacBans,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// PrettyPrint Pretty print response
	PrettyPrint *bool `form:"pretty_print,omitempty" json:"pretty_print,omitempty"`
}

// UploadUserParams defines parameters for UploadUser.
type UploadUserParams struct {
	// Steamid The Steam ID for the user
	Steamid string `form:"steamid" json:"steamid"`

	// PrettyPrint Pretty print response
	PrettyPrint *bool `form:"pretty_print,omitempty" json:"pretty_print,omitempty"`
}

// DeleteUserParams defines parameters for DeleteUser.
type DeleteUserParams struct {
	// PrettyPrint Pretty print response
	PrettyPrint *bool `form:"pretty_print,omitempty" json:"pretty_print,omitempty"`
}

// GetUserBySteamIDParams defines parameters for GetUserBySteamID.
type GetUserBySteamIDParams struct {
	// PrettyPrint Pretty print response
	PrettyPrint *bool `form:"pretty_print,omitempty" json:"pretty_print,omitempty"`
}

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {
	// PrettyPrint Pretty print response
	PrettyPrint *bool `form:"pretty_print,omitempty" json:"pretty_print,omitempty"`
}

// UploadUserJSONRequestBody defines body for UploadUser for application/json ContentType.
type UploadUserJSONRequestBody = User

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// Getter for additional properties for Problem. Returns the specified
// element and whether it was found
func (a Problem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Problem
func (a *Problem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Problem to handle AdditionalProperties
func (a *Problem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Problem to handle AdditionalProperties
func (a Problem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadUserWithBody request with any body
	UploadUserWithBody(ctx context.Context, params *UploadUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadUser(ctx context.Context, params *UploadUserParams, body UploadUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, steamID string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBySteamID request
	GetUserBySteamID(ctx context.Context, steamID string, params *GetUserBySteamIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, steamID string, params *UpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, steamID string, params *UpdateUserParams, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadUserWithBody(ctx context.Context, params *UploadUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadUser(ctx context.Context, params *UploadUserParams, body UploadUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, steamID string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, steamID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBySteamID(ctx context.Context, steamID string, params *GetUserBySteamIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBySteamIDRequest(c.Server, steamID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, steamID string, params *UpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, steamID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, steamID string, params *UpdateUserParams, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, steamID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrettyPrint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty_print", runtime.ParamLocationQuery, *params.PrettyPrint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadUserRequest calls the generic UploadUser builder with application/json body
func NewUploadUserRequest(server string, params *UploadUserParams, body UploadUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUploadUserRequestWithBody generates requests for UploadUser with any type of body
func NewUploadUserRequestWithBody(server string, params *UploadUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "steamid", runtime.ParamLocationQuery, params.Steamid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PrettyPrint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty_print", runtime.ParamLocationQuery, *params.PrettyPrint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, steamID string, params *DeleteUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "steamID", runtime.ParamLocationPath, steamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrettyPrint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty_print", runtime.ParamLocationQuery, *params.PrettyPrint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBySteamIDRequest generates requests for GetUserBySteamID
func NewGetUserBySteamIDRequest(server string, steamID string, params *GetUserBySteamIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "steamID", runtime.ParamLocationPath, steamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrettyPrint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty_print", runtime.ParamLocationQuery, *params.PrettyPrint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, steamID string, params *UpdateUserParams, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, steamID, params, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, steamID string, params *UpdateUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "steamID", runtime.ParamLocationPath, steamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PrettyPrint != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pretty_print", runtime.ParamLocationQuery, *params.PrettyPrint); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// UploadUserWithBodyWithResponse request with any body
	UploadUserWithBodyWithResponse(ctx context.Context, params *UploadUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadUserResponse, error)

	UploadUserWithResponse(ctx context.Context, params *UploadUserParams, body UploadUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, steamID string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserBySteamIDWithResponse request
	GetUserBySteamIDWithResponse(ctx context.Context, steamID string, params *GetUserBySteamIDParams, reqEditors ...RequestEditorFn) (*GetUserBySteamIDResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, steamID string, params *UpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, steamID string, params *UpdateUserParams, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)
}

type GetUsersResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *User
	ApplicationproblemJSON403 *Problem
	ApplicationproblemJSON404 *Problem
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *Problem
	ApplicationproblemJSON404 *Problem
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBySteamIDResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *User
	ApplicationproblemJSON403 *Problem
	ApplicationproblemJSON404 *Problem
}

// Status returns HTTPResponse.Status
func (r GetUserBySteamIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBySteamIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *Problem
	ApplicationproblemJSON404 *Problem
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// UploadUserWithBodyWithResponse request with arbitrary body returning *UploadUserResponse
func (c *ClientWithResponses) UploadUserWithBodyWithResponse(ctx context.Context, params *UploadUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadUserResponse, error) {
	rsp, err := c.UploadUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadUserResponse(rsp)
}

func (c *ClientWithResponses) UploadUserWithResponse(ctx context.Context, params *UploadUserParams, body UploadUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadUserResponse, error) {
	rsp, err := c.UploadUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, steamID string, params *DeleteUserParams, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, steamID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserBySteamIDWithResponse request returning *GetUserBySteamIDResponse
func (c *ClientWithResponses) GetUserBySteamIDWithResponse(ctx context.Context, steamID string, params *GetUserBySteamIDParams, reqEditors ...RequestEditorFn) (*GetUserBySteamIDResponse, error) {
	rsp, err := c.GetUserBySteamID(ctx, steamID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBySteamIDResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, steamID string, params *UpdateUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, steamID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, steamID string, params *UpdateUserParams, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, steamID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ParseUploadUserResponse parses an HTTP response from a UploadUserWithResponse call
func ParseUploadUserResponse(rsp *http.Response) (*UploadUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBySteamIDResponse parses an HTTP response from a GetUserBySteamIDWithResponse call
func ParseGetUserBySteamIDResponse(rsp *http.Response) (*GetUserBySteamIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBySteamIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get users
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Upload user
	// (POST /users)
	UploadUser(ctx echo.Context, params UploadUserParams) error
	// Delete user
	// (DELETE /users/{steamID})
	DeleteUser(ctx echo.Context, steamID string, params DeleteUserParams) error
	// Get user by Steam ID
	// (GET /users/{steamID})
	GetUserBySteamID(ctx echo.Context, steamID string, params GetUserBySteamIDParams) error
	// Updated user
	// (PUT /users/{steamID})
	UpdateUser(ctx echo.Context, steamID string, params UpdateUserParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "pretty_print" -------------

	err = runtime.BindQueryParameter("form", true, false, "pretty_print", ctx.QueryParams(), &params.PrettyPrint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pretty_print: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// UploadUser converts echo context to params.
func (w *ServerInterfaceWrapper) UploadUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadUserParams
	// ------------- Required query parameter "steamid" -------------

	err = runtime.BindQueryParameter("form", true, true, "steamid", ctx.QueryParams(), &params.Steamid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steamid: %s", err))
	}

	// ------------- Optional query parameter "pretty_print" -------------

	err = runtime.BindQueryParameter("form", true, false, "pretty_print", ctx.QueryParams(), &params.PrettyPrint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pretty_print: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadUser(ctx, params)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "steamID" -------------
	var steamID string

	err = runtime.BindStyledParameterWithOptions("simple", "steamID", ctx.Param("steamID"), &steamID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steamID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserParams
	// ------------- Optional query parameter "pretty_print" -------------

	err = runtime.BindQueryParameter("form", true, false, "pretty_print", ctx.QueryParams(), &params.PrettyPrint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pretty_print: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, steamID, params)
	return err
}

// GetUserBySteamID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBySteamID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "steamID" -------------
	var steamID string

	err = runtime.BindStyledParameterWithOptions("simple", "steamID", ctx.Param("steamID"), &steamID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steamID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserBySteamIDParams
	// ------------- Optional query parameter "pretty_print" -------------

	err = runtime.BindQueryParameter("form", true, false, "pretty_print", ctx.QueryParams(), &params.PrettyPrint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pretty_print: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserBySteamID(ctx, steamID, params)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "steamID" -------------
	var steamID string

	err = runtime.BindStyledParameterWithOptions("simple", "steamID", ctx.Param("steamID"), &steamID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter steamID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserParams
	// ------------- Optional query parameter "pretty_print" -------------

	err = runtime.BindQueryParameter("form", true, false, "pretty_print", ctx.QueryParams(), &params.PrettyPrint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pretty_print: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, steamID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.UploadUser)
	router.DELETE(baseURL+"/users/:steamID", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:steamID", wrapper.GetUserBySteamID)
	router.PUT(baseURL+"/users/:steamID", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
